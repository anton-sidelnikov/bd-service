name: Common Terraform Deploy Jobs

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      dns_name:
        required: false
        type: string
        default: ""
      backend_key:
        required: true
        type: string
      action:
        required: true
        type: string # "apply" or "destroy"
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      AWS_REGION:
        required: true
      DOMAIN_NAME:
        required: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-terraform-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if remote state bucket exists
        id: state-check
        run: |
          if aws s3api head-bucket --bucket bds-tf-state 2>/dev/null; then
            echo "state_bucket_exists=true" >> "$GITHUB_ENV"
          else
            echo "state_bucket_exists=false" >> "$GITHUB_ENV"
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Bootstrap remote state (if needed)
        if: env.state_bucket_exists == 'false'
        run: |
          cd infra/bootstrap
          terraform init
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -auto-approve

      - name: Package Lambda function
        run: |
          pip install -r requirements.txt -t .
          zip -r lambda.zip .
          cd ..

      - name: Run Terraform (Apply or Destroy)
        run: |
          cd infra/lambda
          terraform init -reconfigure -backend-config="key=${{ inputs.backend_key }}"
          terraform workspace new ${{ inputs.workspace }} || terraform workspace select ${{ inputs.workspace }}

          if [ "${{ inputs.action }}" = "apply" ]; then
            terraform apply -var aws_region=${{ secrets.AWS_REGION }} -var dns_name=${{ inputs.dns_name }} -auto-approve
          elif [ "${{ inputs.action }}" = "destroy" ]; then
            terraform destroy -var aws_region=${{ secrets.AWS_REGION }} -var dns_name=${{ inputs.dns_name }} -auto-approve
            terraform workspace select default
            terraform workspace delete ${{ inputs.workspace }}
          else
            echo "Unknown action: ${{ inputs.action }}" && exit 1
          fi
