name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  test:
    environment: deploy
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Deploy PR Test Environment
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-terraform-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Init workspace
        run: |
          cd infra/lambda
          terraform init -reconfigure -backend-config="key=lambda/pr-${{ github.event.pull_request.number }}.tfstate" -backend-config="${{ secrets.AWS_REGION }}"
          terraform workspace new pr-${{ github.event.pull_request.number }} || terraform workspace select pr-${{ github.event.pull_request.number }}

      - name: Apply Test Infra
        run: |
          cd infra/lambda
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -var dns_name=${{ github.event.pull_request.number }}.${{ secrets.DOMAIN_NAME }} -auto-approve

  destroy-test:
    environment: deploy
    if: github.event.pull_request.merged == true || github.event.pull_request.state == 'closed'
    runs-on: ubuntu-latest
    name: Destroy PR Test Environment
    permissions:
      id-token: write
      contents: read
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-terraform-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Destroy test workspace
        run: |
          cd infra/lambda
          terraform init -reconfigure -backend-config="key=lambda/pr-${{ github.event.pull_request.number }}.tfstate" -backend-config="${{ secrets.AWS_REGION }}"
          terraform workspace select pr-${{ github.event.pull_request.number }}
          terraform destroy -var aws_region=${{ secrets.AWS_REGION }} -auto-approve
          terraform workspace select default
          terraform workspace delete pr-${{ github.event.pull_request.number }}

  production:
    environment: deploy
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    name: Deploy to Production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-terraform-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Init and Select prod workspace
        run: |
          cd infra/lambda
          terraform init -reconfigure -backend-config="key=lambda/prod.tfstate" -backend-config="${{ secrets.AWS_REGION }}"
          terraform workspace new prod || terraform workspace select prod

      - name: Deploy Production Infra
        run: |
          cd infra/lambda
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -var dns_name=${{ secrets.DOMAIN_NAME }} -auto-approve
