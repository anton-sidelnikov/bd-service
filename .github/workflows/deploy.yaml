name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  test:
    environment: deploy
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Deploy PR Test Environment
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-terraform-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if remote state bucket exists
        id: state-check
        run: |
          if aws s3api head-bucket --bucket bds-tf-state 2>/dev/null; then
            echo "state_bucket_exists=true" >> "$GITHUB_ENV"
          else
            echo "state_bucket_exists=false" >> "$GITHUB_ENV"
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Bootstrap remote state (if needed)
        if: env.state_bucket_exists == 'false'
        run: |
          cd infra/bootstrap
          terraform init
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -auto-approve

      - name: Package Lambda function
        run: |
          pip install -r requirements.txt -t .
          zip -r ../lambda.zip .
          cd ..

      - name: Init workspace
        run: |
          cd infra/lambda
          terraform init -reconfigure -backend-config="key=lambda/pr-${{ github.event.pull_request.number }}.tfstate"
          terraform workspace new pr-${{ github.event.pull_request.number }} || terraform workspace select pr-${{ github.event.pull_request.number }}

      - name: Apply Test Infra
        run: |
          cd infra/lambda
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -var dns_name=${{ github.event.pull_request.number }}.${{ secrets.DOMAIN_NAME }} -auto-approve

  destroy-test:
    environment: deploy
    if: github.event.pull_request.merged == true || github.event.pull_request.state == 'closed'
    runs-on: ubuntu-latest
    name: Destroy PR Test Environment
    permissions:
      id-token: write
      contents: read
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-terraform-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if remote state bucket exists
        id: state-check
        run: |
          if aws s3api head-bucket --bucket bds-tf-state 2>/dev/null; then
            echo "state_bucket_exists=true" >> "$GITHUB_ENV"
          else
            echo "state_bucket_exists=false" >> "$GITHUB_ENV"
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Bootstrap remote state (if needed)
        if: env.state_bucket_exists == 'false'
        run: |
          cd infra/bootstrap
          terraform init
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -auto-approve

      - name: Package Lambda function
        run: |
          pip install -r requirements.txt -t .
          zip -r ../lambda.zip .
          cd ..

      - name: Destroy test workspace
        run: |
          cd infra/lambda
          terraform init -reconfigure -backend-config="key=lambda/pr-${{ github.event.pull_request.number }}.tfstate"
          terraform workspace select pr-${{ github.event.pull_request.number }}
          terraform destroy -var aws_region=${{ secrets.AWS_REGION }} -auto-approve
          terraform workspace select default
          terraform workspace delete pr-${{ github.event.pull_request.number }}

  production:
    environment: deploy
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    name: Deploy to Production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-terraform-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if remote state bucket exists
        id: state-check
        run: |
          if aws s3api head-bucket --bucket bds-tf-state 2>/dev/null; then
            echo "state_bucket_exists=true" >> "$GITHUB_ENV"
          else
            echo "state_bucket_exists=false" >> "$GITHUB_ENV"
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Bootstrap remote state (if needed)
        if: env.state_bucket_exists == 'false'
        run: |
          cd infra/bootstrap
          terraform init
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -auto-approve

      - name: Package Lambda function
        run: |
          pip install -r requirements.txt -t .
          zip -r ../lambda.zip .
          cd ..

      - name: Init and Select prod workspace
        run: |
          cd infra/lambda
          terraform init -reconfigure -backend-config="key=lambda/prod.tfstate"
          terraform workspace new prod || terraform workspace select prod

      - name: Deploy Production Infra
        run: |
          cd infra/lambda
          terraform apply -var aws_region=${{ secrets.AWS_REGION }} -var dns_name=${{ secrets.DOMAIN_NAME }} -auto-approve
